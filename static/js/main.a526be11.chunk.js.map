{"version":3,"sources":["components/WordRow.js","utils/word-checker.js","App.js","index.js"],"names":["WordRow","word","solution","className","Array","from","map","_","i","checkGuess","guess","frequencyTable","split","reduce","total","letter","result","forEach","App","WordOfTheDay","useState","guesses","setGuesses","currentWord","setCurrentWord","gameState","setGameState","handleKeyDown","e","pressedKey","String","key","found","match","length","prev","toUpperCase","Object","keys","values","every","v","alert","enter","slice","React","useEffect","window","addEventListener","removeEventListener","onClick","location","reload","rootElement","document","getElementById","createRoot","render"],"mappings":"wMAYeA,MAVf,SAAiB,GAA0B,IAAD,IAAvBC,YAAI,MAAG,GAAE,EAAEC,EAAQ,EAARA,SAC5B,OACE,qBAAKC,UAAU,WAAU,SACtBC,MAAMC,KAAKD,MAAM,IAAIE,KAAI,SAACC,EAAGC,GAAC,OAC7B,sBAAML,UAAWD,GAAYA,EAASM,GAAG,SAAEP,EAAKO,IAAM,KAAW,KAIzE,ECHO,SAASC,EAAWC,EAAOR,GAChC,IAAMS,EAAmCT,EAP7BU,MAAM,IAAIC,QAAO,SAACC,EAAOC,GAEnC,OADAD,EAAMC,GAAUD,EAAMC,KAAaD,EAAMC,GAAU,EAC5CD,CACT,GAAG,CAAC,GAMEE,EAAS,CAAC,EAoBhB,OAjBA,YAAIN,GAAOO,SAAQ,SAACF,EAAQP,GACtBG,EAAeI,IAAWb,EAASM,IAAMO,IAC3CC,EAAOR,GAAK,QACZG,EAAeI,KAEnB,IAGA,YAAIL,GAAOO,SAAQ,SAACF,EAAQP,GACtBQ,EAAOR,IAEPG,EAAeI,KACjBC,EAAOR,GAAK,SACZG,EAAeI,KAEnB,IAEOC,CACT,C,MCwDeE,MAlFf,WACE,IAAMC,EAAe,QACrB,EAA8BC,mBAAS,IAAG,mBAAnCC,EAAO,KAAEC,EAAU,KAC1B,EAAsCF,mBAAS,IAAG,mBAA3CG,EAAW,KAAEC,EAAc,KAClC,EAAkCJ,mBAAS,WAAU,mBAA9CK,EAAS,KAAEC,EAAY,KA8BxBC,EAAgB,SAACC,GACrB,IAAIC,EAAaC,OAAOF,EAAEG,KAC1B,GAAmB,cAAfF,EAKJ,GAAmB,UAAfA,EAAJ,CAKA,IAlBYd,EAkBRiB,EAAQH,EAAWI,MAAM,WAC7B,GAAKD,KAASA,EAAME,OAAS,GAnBjBnB,EAsBLc,EArBPL,GAAe,SAACW,GAAI,OAClBA,EAAKD,QAAU,EAAIC,EAAOA,EAAOpB,EAAOqB,aAAa,GAcvD,MAnCY,WACZ,GAAiB,WAAbX,GAAgD,GAAtBF,EAAYW,OAAa,CACrD,IAAMlB,EAASP,EAAWc,EAAaJ,GAGP,GAA9BkB,OAAOC,KAAKtB,GAAQkB,QACpBG,OAAOE,OAAOvB,GAAQwB,OAAM,SAACC,GAAC,MAAW,UAANA,CAAa,KAEhDf,EAAa,OACbgB,MAAM,8BACqB,GAAlBrB,EAAQa,SACjBR,EAAa,QACbgB,MAAM,4BAGRpB,GAAW,SAACa,GAAI,4BAASA,GAAI,CAAEZ,GAAc,IAC7CC,EAAe,GACjB,CACF,CAeImB,QAnCFnB,GAAe,SAACW,GAAI,OAAKA,GAAQA,EAAKS,MAAM,GAAI,EAAE,GA6CpD,EAaA,OAZAC,IAAMC,WAAU,WAGd,OAFAC,OAAOC,iBAAiB,QAASrB,GAE1B,WACLoB,OAAOE,oBAAoB,QAAStB,EACtC,CACF,GAAG,CAACJ,EAAaE,EAAWJ,IAO1B,qBAAKlB,UAAU,MAAK,SAClB,yBAAQA,UAAU,aAAY,UAC5B,4CACA,uBACA,uBACCkB,EAAQf,KAAI,SAACI,GAAK,OACjB,cAAC,EAAO,CAACT,KAAMS,EAAOR,SAAUO,EAAWC,EAAOS,IAAiB,IAEvD,WAAbM,GAA0B,cAAC,EAAO,CAACxB,KAAMsB,IAC1C,uBACA,wBAAQ2B,QAfA,WACZH,OAAOI,SAASC,QAClB,EAa6B,yBAI/B,EChFMC,EAAcC,SAASC,eAAe,QAC/BC,qBAAWH,GAEnBI,OACH,cAAC,aAAU,UACT,cAAC,EAAG,M","file":"static/js/main.a526be11.chunk.js","sourcesContent":["import \"./WordRow.css\";\r\n\r\nfunction WordRow({ word = \"\", solution }) {\r\n  return (\r\n    <div className=\"word-row\">\r\n      {Array.from(Array(5)).map((_, i) => (\r\n        <span className={solution && solution[i]}>{word[i] || \"_\"}</span>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordRow;\r\n","function getFrequencyTable(word) {\r\n  return word.split(\"\").reduce((total, letter) => {\r\n    total[letter] ? total[letter]++ : (total[letter] = 1);\r\n    return total;\r\n  }, {});\r\n}\r\n\r\nexport function checkGuess(guess, solution) {\r\n  const frequencyTable = getFrequencyTable(solution);\r\n\r\n  const result = {};\r\n\r\n  // Check for green\r\n  [...guess].forEach((letter, i) => {\r\n    if (frequencyTable[letter] && solution[i] == letter) {\r\n      result[i] = \"green\";\r\n      frequencyTable[letter]--;\r\n    }\r\n  });\r\n\r\n  // Check for yellow\r\n  [...guess].forEach((letter, i) => {\r\n    if (result[i]) return;\r\n\r\n    if (frequencyTable[letter]) {\r\n      result[i] = \"yellow\";\r\n      frequencyTable[letter]--;\r\n    }\r\n  });\r\n\r\n  return result;\r\n}\r\n","import React, { useState } from \"react\";\nimport WordRow from \"./components/WordRow\";\nimport { checkGuess } from \"./utils/word-checker\";\nimport \"./App.css\";\n\nfunction App() {\n  const WordOfTheDay = \"APPLE\";\n  const [guesses, setGuesses] = useState([]);\n  const [currentWord, setCurrentWord] = useState(\"\");\n  const [gameState, setGameState] = useState(\"running\");\n\n  const backspace = () => {\n    setCurrentWord((prev) => prev && prev.slice(0, -1));\n  };\n  const enter = () => {\n    if (gameState == \"running\" && currentWord.length == 5) {\n      const result = checkGuess(currentWord, WordOfTheDay);\n\n      if (\n        Object.keys(result).length == 5 &&\n        Object.values(result).every((v) => v === \"green\")\n      ) {\n        setGameState(\"Won\");\n        alert(\"Congrats! You have Won...\");\n      } else if (guesses.length == 5) {\n        setGameState(\"Loss\");\n        alert(\"Sorry! You have lost...\");\n      }\n\n      setGuesses((prev) => [...prev, currentWord]);\n      setCurrentWord(\"\");\n    }\n  };\n  const word = (letter) => {\n    setCurrentWord((prev) =>\n      prev.length >= 5 ? prev : prev + letter.toUpperCase()\n    );\n  };\n\n  const handleKeyDown = (e) => {\n    let pressedKey = String(e.key);\n    if (pressedKey === \"Backspace\") {\n      backspace();\n      return;\n    }\n\n    if (pressedKey === \"Enter\") {\n      enter();\n      return;\n    }\n\n    let found = pressedKey.match(/[a-z]/gi);\n    if (!found || found.length > 1) {\n      return;\n    } else {\n      word(pressedKey);\n    }\n  };\n  React.useEffect(() => {\n    window.addEventListener(\"keyup\", handleKeyDown);\n\n    return () => {\n      window.removeEventListener(\"keyup\", handleKeyDown);\n    };\n  }, [currentWord, gameState, guesses]);\n\n  const Reset = () => {\n    window.location.reload();\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>WORDLE APP</h1>\n        <br />\n        <br />\n        {guesses.map((guess) => (\n          <WordRow word={guess} solution={checkGuess(guess, WordOfTheDay)} />\n        ))}\n        {gameState == \"running\" && <WordRow word={currentWord} />}\n        <br />\n        <button onClick={Reset}> Reset </button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport { createRoot } from \"react-dom/client\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nconst root = createRoot(rootElement);\n\nroot.render(\n  <StrictMode>\n    <App />\n  </StrictMode>\n);\n"],"sourceRoot":""}